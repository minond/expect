#!/bin/bash

#==============================================================================
#         FILE: expect
#  DESCRIPTION: basic assertion method for bash, with TAP output. for info
#               on TAP, visit http://podwiki.hexten.net/TAP/TAP.html and
#               http://testanything.org/tap-specification.html
#        USAGE: see usage function
#==============================================================================

EXPECT_OUTPUT_HEADER_DONE=0
EXPECT_FAILED_TESTS=()
EXPECT_TEST_COUNT=0
EXPECT_TOTAL_TEST_COUNT=0

#=== FUNCTION =================================================================
#        NAME: -expect
# DESCRIPTION: an assert method
# PARAMETER 1: test description
# PARAMETER 2: test exit code (ignored)
# PARAMETER 3: reason for skipping test
#==============================================================================
-expect() {
    local description=$1
    local reason=$2
    [ ! -z "$3" ] && reason=$3
    EXPECT_TEST_COUNT=$((EXPECT_TEST_COUNT + 1))
    echo "ok $EXPECT_TEST_COUNT - $description # SKIP $reason"
    return 0
}

#=== FUNCTION =================================================================
#        NAME: expect
# DESCRIPTION: an assert method
# PARAMETER 1: test description
# PARAMETER 2: test exit code (defaults to last exit code)
#==============================================================================
expect() {
    local exit_code=$?
    local description=$1
    [ ! -z "$2" ] && exit_code=$2


    EXPECT_TEST_COUNT=$((EXPECT_TEST_COUNT + 1))
    output:header

    # TAP test line
    if [[ "$exit_code" -eq "0" ]]; then
        echo "ok $EXPECT_TEST_COUNT - $description"
    else
        echo "not ok $EXPECT_TEST_COUNT - $description"
        EXPECT_FAILED_TESTS+=($EXPECT_TEST_COUNT)
    fi

    output:footer
    [ "$exit_code" ]
}

#=== FUNCTION =================================================================
#        NAME: bail_out
# DESCRIPTION: stop execution of script
# PARAMETER 1: message/reason of bail out
#==============================================================================
bail_out() {
    echo "Bail out! $1"
    exit 1
}

#=== FUNCTION =================================================================
#        NAME: bail_out
# DESCRIPTION: output a helper message
# PARAMETER 1: message/diagnostic
#==============================================================================
diagnostic() {
    echo "# $1"
}

#=== FUNCTION =================================================================
#        NAME: output:header
# DESCRIPTION: TAP version and plan
#==============================================================================
output:header() {
    if [ "$EXPECT_OUTPUT_HEADER_DONE" -eq 0 ]; then
        echo "TAP version 13"
        echo "1..$EXPECT_TOTAL_TEST_COUNT"
        EXPECT_OUTPUT_HEADER_DONE=1
    fi
}

#=== FUNCTION =================================================================
#        NAME: output:footer
# DESCRIPTION: TAP failed tests summary
#==============================================================================
output:footer() {
    if [ "$EXPECT_TOTAL_TEST_COUNT" -eq "$EXPECT_TEST_COUNT" ] && [ ${#EXPECT_FAILED_TESTS[@]} -ne 0 ]; then
        local save_ifs=$IFS
        local failed_tests_count="${#EXPECT_FAILED_TESTS[@]}"
        local failed_percentage=$(echo "scale=2; 100 - $failed_tests_count * 100 / $EXPECT_TOTAL_TEST_COUNT" | bc)
        local failed_fraction="$failed_tests_count/$EXPECT_TOTAL_TEST_COUNT"
        local failed_list=

        IFS=","
        failed_list="${EXPECT_FAILED_TESTS[*]}"
        failed_list="${failed_list//,/, }"
        IFS=$save_ifs

        echo
        echo "FAILED tests $failed_list"
        echo "Failed $failed_fraction tests, $failed_percentage% okay"

        exit 1
    fi
}

#=== FUNCTION =================================================================
#        NAME: tests:counter
# DESCRIPTION: TAP failed tests summary
# PARAMETER 1: file to count tests in
#==============================================================================
tests:counter() {
    local file=$1
    EXPECT_TOTAL_TEST_COUNT=$((
        EXPECT_TOTAL_TEST_COUNT +
        $(grep -c "^-expect " < "$file") +
        $(grep -c "^expect " < "$file")
    ))
}

for file in "$@"; do
    tests:counter "$file"
done

for file in "$@"; do
    source "$file"
done
